#'
#' @param key_column The column you want to see.
#' @param target_column The column you want to compare with the
#' key_column.
#' @returns Two selected columns in a table for comparison.
#' @examples
#' select_key_fucntion
#'
compare2 <- function(data, column1, column2) {
# Check if the key_column exists in the data frame
if(!(column1 %in% colnames(data))) {
stop("Column1 name: '", column1, "' does not exist in the data frame'")
}
# Check if the target_column exists in the data frame
if(!(column2 %in% colnames(data))){
stop("Column2 name: '", column2, "' does not exist in the data frame")
}
#return the key column alongside the target column
return(data[, c(column1, column2)])
}
data("psymeta")
View(psymeta)
compare2(psymeta, 'yi', 'vi')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?compare2
load("~/Projects/rcollectadhd/data/bf.rda")
load("~/Projects/rcollectadhd/data/chil_reac1.rda")
load("~/Projects/rcollectadhd/data/chil_reac2.rda")
load("~/Projects/rcollectadhd/data/doublecone.rda")
load("~/Projects/rcollectadhd/data/DTR_adhd.rda")
load("~/Projects/rcollectadhd/data/psymeta.rda")
load("~/Projects/rcollectadhd/data/student_performance_data.rda")
View(bf)
View(chil_reac1)
View(chil_reac2)
View(doublecone)
View(DTR_adhd)
View(psymeta)
View(student_performance_data)
load("~/Projects/rcollectadhd/data/maybedoublecone.rda")
load("~/Projects/rcollectadhd/data/maybedoublecone.rda")
doublecone = adhd
use_data(doublecone)
usethis::use_data(doublecone)
load("~/Projects/rcollectadhd/data/doublecone.rda")
devtools::document()
devtools::document()
?sapply
sapply(mtcars, class)
mt_class = sapply(mtcars, class)
table(mt_class)
sapply(bf, class)
bf_class = sapply(bf, class)
table(bf_class)
return(class_table)
num_class <- function(data) {
class_type <- sapply(data, class)
class_table <- table(class_type)
return(class_table)
}
num_class(bf)
usethis::use_r(num_class)
usethis::use_r('num_class')
num_class(xf)
num_class <- function(data) {
if(!exists(data)) {
stop('It appears the data frame does not exist')
}
class_type <- sapply(data, class)
class_table <- table(class_type)
return(class_table)
}
num_class(xf)
num_class <- function(data) {
class_type <- sapply(data, class)
class_table <- table(class_type)
return(class_table)
}
num_class(xf)
num_class(bf)
num_class(student_performance_data)
?sapply(list, function)
?sapply()
?summary
?compare2
?head
?dim
devtools::document()
devtools::document()
devtools::document()
?any
any(sapply(chil_reac1, is.numeric))
chil_reac2_factor <- c(chil_reac2$Group, chil_reac2$Stimulus)
any(sapply(chil_reac2_factor, is.numeric))
sapply(chil_reac1, is.numeric)
chil_reac1[, is.numeric]
numeric_columns <- sapply(chil_reac1, is.numeric)
numeric_columns_chil_reac1 <- sapply(chil_reac1, is.numeric)
print(numeric_columns_chil_reac1)
is_numeric_columns_chil_reac1 <- sapply(chil_reac1, is.numeric)
print(numeric_columns_chil_reac1)
print(is_numeric_columns_chil_reac1)
numeric_columns_chil_reac1 <- chil_reac1[, is_numeric_columns_chil_reac1]
print(numeric_columns_chil_reac1)
sapply(chil_reac2, is.numeric)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
max_value <- max(data$column)
return(sapply(data, max_value))
}
highest_numerical_value(chil_reac1)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Find the max value in each column
find_max_value <- max(data$column)
max_values <- sapply(data, max_value)
}
highest_numerical_value(chil_reac1)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Find the max value in each column
find_max_value <- max(data$column, na.rm = TRUE)
max_values <- sapply(data, max_value)
}
highest_numerical_value(chil_reac1)
?function
highest_numerical_value <- function(data) {
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Find the max value in each column
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
return(max_values)
}
highest_numerical_value(chil_reac1)
View(chil_reac2)
highest_numerical_value(doublecone)
highest_numerical_value(chil_reac1)
highest_numerical_value(chil_reac2)
highest_numerical_value(bf)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Add the max values of each numeric columns to a matrix
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
return(max_values)
return(colnames(numeric_df))
}
highest_numerical_value(chil_reac1)
highest_numerical_value(bf)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Add the max values of each numeric columns to a matrix
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
return(max_values, colnames(numeric_df))
}
highest_numerical_value(bf)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Add the max values of each numeric columns to a matrix
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
result <- data.frame(
columns_containg_numeric_values = colnames(numeric_df),
max_values
)
}
highest_numerical_value(chil_reac1)
return(result)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Add the max values of each numeric columns to a matrix
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
result <- data.frame(
columns_containg_numeric_values = colnames(numeric_df),
max_values
)
return(result)
}
highest_numerical_value(chil_reac1)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Add the max values of each numeric columns to a matrix
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
result <- data.frame(
numeric_cols = colnames(numeric_df),
max_values
)
return(result)
}
highest_numerical_value(chil_reac1)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Add the max values of each numeric columns to a matrix
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
result <- data.frame(
max_values,
numeric_cols = colnames(numeric_df)
)
return(result)
}
highest_numerical_value(chil_reac1)
highest_numerical_value(doublecone)
highest_numerical_value(bf)
View(bf)
highest_numerical_value <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Add the max values of each numeric columns to a matrix
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
return(max_values)
}
highest_numerical_value(bf)
max_val <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Find the max value in each of the columns that contain numeric data
max_values <- sapply(numeric_df, function(column) max(column, na.rm = TRUE))
return(max_values)
}
max_val(DTR_adhd)
min_val <- function(data) {
# Check if the data frame contains any numeric values
if(!(any(sapply(data, is.numeric)))) {
stop('None of the columns in the data frame are numeric')
}
# Add all the columns that are numeric to a data frame
check_numeric <- sapply(data, is.numeric)
numeric_df <- data[, check_numeric]
# Find the max value in each of the columns that contain numeric data
min_values <- sapply(numeric_df, function(column) min(column, na.rm = TRUE))
return(min_values)
}
min_val(bf)
View(bf)
View(adhd)
View(chil_reac1)
dim(bf)
dim(chil_reac1)
ex_df <- data.frame(
boys = c('john','matthew','niall','roger'),
ages = c('21','22','23','24')
)
dim(ex_df)
max_val(ex_df)
exdf <- data.frame(
boys = c('john','matthew','niall','roger'),
ages = c(21,22,23,24)
)
dim(exdf)
max_val(exdf)
exdf <- data.frame(
boys = c('john','matthew','niall','roger'),
ages = c(21,22,23,24,
25,77,16,11)
)
exdf <- data.frame(
boys = c('john','matthew','niall','roger'),
ages = c(21,22,23,24,
25,77,16,11)
)
dim(exdf)
max_val(exdf)
tbf = t(bf)
View(tbf)
max_val(tbf)
max_val(bf)
View(bf)
num_class(bf)
sapply(bf, is.numeric)
max(bf$accuracy)
min_val(bf)
max_val(exdf)
exdf <- data.frame(
boys = c('john','matthew'),
ages = c(21,22,23,24,
25,77,16,11)
)
dim(exdf)
dim(bf)
max_val(exdf)
print(exdf)
table(exdf)
exdf <- data.frame(
boys = c('john','matthew'),
ages = c(21,22)
)
print(exdf)
table(exdf)
max_val(exdf)
max_val(ex_df)
exdf <- data.frame(
john = 21
matthew = 22
exdf <- data.frame(
john = 21,
matthew = 22
)
max_val(exdf)
exdf <- data.frame(
john = c(21,23,60,12),
matthew = c(22,11,5,78)
)
max_val(exdf)
print(bf$accuracy)
print(exdf$john)
print(chil_reac1$Group)
bfex = data.frame(
accuracy = bf$accuracy,
group = bf$group
)
View(bfex)
View(bf)
View(bfex)
max_val(bfex)
ran = runif(51, min = 0, max = 15)
bfex = data.frame(
accuracy = bf$accuracy,
group = bf$group,
random = ran
)
max_val(bfex)
max_val(exdf)
exdf <- data.frame(
john = c(21,23,60,12),
matthew = c(22,11,5,78),
verbs = c('run','walk','jump','leap')
)
max_val(exdf)
max_val(bf)
bfex1 = data.frame(
accuracy = bf$accuracy,
group = bf$group
)
max_val(bfex1)
max_val(bf)
max_val(bfex1)
max_val(bfex)
max_val(psymeta)
usethis::use_r(max_val())
usethis::use_r('max_val')
usethis::use_r('min_val')
devtools::document()
load("~/Projects/rcollectadhd/data/chil_reac1.rda")
View(chil_reac1)
usethis::use_r('chil_reac2')
devtools::document()
getwd()
devtools::check()
?devtools::build()
devtools::document()
devtools::use_gpl_license()
use_gpl_license()
usethis::use_gpl_license()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
?devtools::build()
devtools::build()
devtools::build()
library(styler)
style_file(C:/Users/johnm/Documents/Projects/adhd.copies/chil_reac1copy.R)
style_file(C://Users//johnm//Documents//Projects//adhd.copies//chil_reac1copy.R)
style_file("C://Users//johnm//Documents//Projects//adhd.copies//chil_reac1copy.R")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
devtools::load_all()
data <- "smart"
data <- library(rcollectadhd)
library(rcollectadhd)
data <- student
View(data)
library(ggplot2)
ggplot(data,
aes(SleepPerDayHours)) +
geom_point()
ggplot(data,
aes(SleepPerDayHours)) +
geom_hitogram()
ggplot(data,
aes(SleepPerDayHours)) +
geom_histogram()
student <- student
bfd <- bf
View(bfd)
ggplot(bfd,
aes(x = group, y = accuracy)) +
geom_boxplot()
sd <- smart
View(sd)
colnames(sd) <- c("ID","s1.ODD","s1.ADHD","s1.med","s1.race","s1.int","res",
"no.res.t", "s1.ad","s2.int","y")
sd$no.res.t <- ifelse(sd$no.res.t == NA, 0, sd$no.res.t)
sd <- smart
getwd()
setwd("C:/Users/johnm/Documents/Projects/adhd/dev")
sd$no.res.t <- ifelse(sd$no.res.t == is.na, 0, sd$no.res.t)
sd <- smart
sd$no.res.t <- ifelse(is.na(sd$no.res.t), 0, sd$no.res.t)
colnames(sd) <- c("ID","s1.ODD","s1.ADHD","s1.med","s1.race","s1.int","res",
"no.res.t", "s1.ad","s2.int","y")
sd$no.res.t <- ifelse(is.na(sd$no.res.t), 0, sd$no.res.t)
setwd("C:/Users/johnm/Documents/Projects/adhd/dev/Analysis")
getwd()
#compute summary statistics
mean(sd$y)
#compute summary statistics
mean.y <- mean(sd$y)
setwd("C:/Users/johnm/Documents/Projects/adhd/dev")
str(sd)
as.factor(sd$res)
sd$res <- ifelse(sd$res == 1, "Responder", "Non-Responder")
table(sd$res)
#who scored better, responders or non-responders?
ggplot(sd,
aes(x = res, y = y)) +
geom_boxplot()
#who scored better, responders or non-responders?
ggplot(sd,
aes(x = res, y = y)) +
geom_bar()
#who scored better, responders or non-responders?
ggplot(sd,
aes(x = res, y = y)) +
geom_point()
library(usethis)
setwd("~/Projects/adhd/rcollectadhd")
use_testthat()
use_test("max_val")
devtools::test()
